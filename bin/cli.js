#!/usr/bin/env node
"use strict";var o=require("commander"),e=require("path"),r=require("fs"),n=require("child_process");o.program.option("-w, --workflow <type>","relative path to workflow file"),o.program.option("-n, --name <type>","workflow name to compile in the file"),o.program.parse(process.argv);var c=o.program.opts(),t='{\n    "compilerOptions": {\n      "target": "es5",\n      "module": "CommonJS",\n      "outDir": "../'.concat("_workflow_compile_",'",\n      "lib": ["ESNext", "dom"],\n      "allowJs": false,\n      "sourceMap": true,\n      "experimentalDecorators": false,\n      "noUnusedLocals": false,\n      "esModuleInterop": true,\n      "moduleResolution": "node",\n      "types": [\n        "node",\n        "jest",\n      ],\n      "jsx": "react"\n    }\n  }\n');if(c.workflow&&c.name){r.rmSync(e.resolve("./".concat("_workflow_gen_")),{force:!0,recursive:!0}),r.rmSync(e.resolve("./".concat("_workflow_compile_")),{force:!0,recursive:!0}),r.mkdirSync(e.resolve("./".concat("_workflow_gen_")));var l=c.workflow.substring(0,c.workflow.lastIndexOf(".")),w='\nimport { buildJsxWorkflow } from "taskflow-react"\nimport { dumpWorkflow } from "taskflow-react"\nimport {'.concat(c.name,'} from "../').concat(l,'"\nconst workflow = buildJsxWorkflow(').concat(c.name,")\nconst workflowWithName = buildJsxWorkflow(").concat(c.name,", true)\nexport const dumpWorkflowText = dumpWorkflow(workflow)\nexport const dumpWorkflowwTextWithName = dumpWorkflow(workflowWithName)\n");r.writeFileSync(e.resolve("./".concat("_workflow_gen_","/").concat("tsconfig.workflow_build.json")),t),r.writeFileSync(e.resolve("./".concat("_workflow_gen_","/").concat("dump_workflow_script",".ts")),w),n.exec("tsc --project ./".concat("_workflow_gen_","/").concat("tsconfig.workflow_build.json"),(function(o,n,t){if(o)return console.error("exec error: ".concat(o)),console.log("stdout: ".concat(n)),void console.error("stderr: ".concat(t));var l=require("../../../".concat("_workflow_compile_","/").concat("_workflow_gen_","/").concat("dump_workflow_script"));console.log("[32m","export const "+c.name+"Gen = "+l.dumpWorkflowText+"\n\n"),console.log("[32m","export const "+c.name+"GenWithName = "+l.dumpWorkflowwTextWithName+"\n\n"),console.log("[37m"),r.rmSync(e.resolve("./".concat("_workflow_gen_")),{force:!0,recursive:!0}),r.rmSync(e.resolve("./".concat("_workflow_compile_")),{force:!0,recursive:!0})}))}
